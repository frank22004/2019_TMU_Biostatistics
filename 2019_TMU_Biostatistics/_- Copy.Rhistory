plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(anova_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "in", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,5000))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=19),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(anova_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "in", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4800))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=19),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(anova_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "in", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4600))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=19),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(anova_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "in", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=19),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(anova_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "out", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=19),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(anova_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "out", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=19),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="YoungsModulus",add = "mean_se", ylab = "Youngs Modulus (kPa)",label = TRUE, fill = "blue", lab.nb.digits = 2,
lab.vjust=1.1,
lab.pos = "in", lab.col = "white", lab.size = 6, size = 2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7),ylim=c(0,30))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white'))+
scale_x_discrete(labels=my_xlab, limits=SynthesisMatrix$`Status.x`)+
stat_pvalue_manual(dun,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`YoungsModulus` ~ Status.x,data = df_data), detailed = T))
#label = "p = {scales::pvalue(p.adj)}",
ggbarplot(df_data,x="Status.x",y="YoungsModulus",add = "mean_se", ylab = "Youngs Modulus (kPa)",label = TRUE, fill = "blue", lab.nb.digits = 2,
lab.vjust=1.1,
lab.pos = "in", lab.col = "white", lab.size = 6, size = 2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7),ylim=c(0,30))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white'))+
scale_x_discrete(labels=my_xlab, limits=SynthesisMatrix$`Status.x`)+
stat_pvalue_manual(dun,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`YoungsModulus` ~ Status.x,data = df_data), detailed = T))
#label = "p = {scales::pvalue(p.adj)}",
ggbarplot(df_data,x="Status.x",y="YoungsModulus",add = "mean_se", ylab = "Youngs Modulus (kPa)",label = TRUE, fill = "blue", lab.nb.digits = 2,
lab.vjust=1.1,
lab.pos = "in", lab.col = "white", lab.size = 6, size = 2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7),ylim=c(0,30))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white'))+
scale_x_discrete(labels=my_xlab, limits=SynthesisMatrix$`Status.x`)+
stat_pvalue_manual(dun,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`YoungsModulus` ~ Status.x,data = df_data), detailed = T))
#label = "p = {scales::pvalue(p.adj)}",
ggbarplot(df_data,x="Status.x",y="YoungsModulus",add = "mean_se", ylab = "Youngs Modulus (kPa)",label = TRUE, fill = "blue", lab.nb.digits = 2,
lab.vjust=1.1,
lab.pos = "in", lab.col = "white", lab.size = 6, size = 2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7),ylim=c(0,30))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white'))+
scale_x_discrete(labels=my_xlab, limits=SynthesisMatrix$`Status.x`)+
stat_pvalue_manual(dun,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`YoungsModulus` ~ Status.x,data = df_data), detailed = T))
#label = "p = {scales::pvalue(p.adj)}",
ggbarplot(df_data,x="Status.x",y="YoungsModulus",add = "mean_se", ylab = "Youngs Modulus (kPa)",label = TRUE, fill = "blue", lab.nb.digits = 2,
lab.vjust=1.1,
lab.pos = "in", lab.col = "white", lab.size = 6, size = 2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7),ylim=c(0,30))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white'))+
scale_x_discrete(labels=my_xlab, limits=SynthesisMatrix$`Status.x`)+
stat_pvalue_manual(dun,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`YoungsModulus` ~ Status.x,data = df_data), detailed = T))
#label = "p = {scales::pvalue(p.adj)}",
ggbarplot(df_data,x="Status.x",y="YoungsModulus",add = "mean_se", ylab = "Youngs Modulus (kPa)",label = TRUE, fill = "blue", lab.nb.digits = 2,
lab.vjust=1.1,
lab.pos = "in", lab.col = "white", lab.size = 6, size = 2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7),ylim=c(0,30))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white'))+
scale_x_discrete(labels=my_xlab, limits=SynthesisMatrix$`Status.x`)+
stat_pvalue_manual(dun,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`YoungsModulus` ~ Status.x,data = df_data), detailed = T))
#label = "p = {scales::pvalue(p.adj)}",
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "out", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=19),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "out", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=40),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "out", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=19),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "out", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=22),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "out", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=23),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="Thickness",add = "mean_se", ylab = "Thickness (μm)",label = TRUE, fill = "red", lab.nb.digits = 2,lab.pos = "out", lab.col = "white", lab.size = 7, size=2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7), ylim=c(0,4500))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=22),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white') )+
scale_x_discrete(labels=my_xlab, limits=thickMatrix$`Status.x`)+
stat_pvalue_manual(thi,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`Thickness` ~ Status.x,data = df_data), detailed = T))
ggbarplot(df_data,x="Status.x",y="YoungsModulus",add = "mean_se", ylab = "Youngs Modulus (kPa)",label = TRUE, fill = "blue", lab.nb.digits = 2,
lab.vjust=1.1,
lab.pos = "in", lab.col = "white", lab.size = 6, size = 2, error.plot = "upper_errorbar", color = "white", add.params = list(size = 2),position = position_dodge(0.7),ylim=c(0,30))+
easy_center_title()+
scale_y_continuous(expand = c(0,0))+
theme(text = element_text(size=22),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.line = element_line(colour = "white", size = 1),
axis.title = element_text(colour = "white"),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.subtitle = element_text(colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white'))+
scale_x_discrete(labels=my_xlab, limits=SynthesisMatrix$`Status.x`)+
stat_pvalue_manual(dun,hide.ns = TRUE, size = 10, color = "white")+
labs(subtitle = get_test_label(wilcox_test(`YoungsModulus` ~ Status.x,data = df_data), detailed = T))
#label = "p = {scales::pvalue(p.adj)}",
#df_data <- subset.data.frame(df_spheroid, `Cell` == 25)
#[df_data$`Cell` == 25,]
SynthesisMatrix <- df_data[df_data$`Cell` == 23 | df_data$`Cell` == 25,] %>%
group_by(`CulturedDate`,`SpheroidDensity`,`Cell`,`Ingredient`,`Condition`,`Ancestor`) %>%
summarise(
count = sum(!is.na(`Diameter`)),
mean = mean(`Diameter`, na.rm = TRUE),
sd = sd(`Diameter`, na.rm = TRUE),
median = median(`Diameter`, na.rm = TRUE),
IQR = IQR(`Diameter`, na.rm = TRUE),
se = sd(`Diameter`, na.rm = TRUE)/sqrt(count)
)
channel <- odbcDriverConnect(PATH)
df_spheroid <- sqlQuery(channel,"SELECT * FROM Spheroid, Cell WHERE Spheroid.Cell=Cell.識別碼;", stringsAsFactors = FALSE)
df_sample <- sqlQuery(channel,"SELECT * FROM Sample, Collagen_Membrane_Preparation WHERE Sample.Scaffolds=Collagen_Membrane_Preparation.識別碼;")
df_data <- merge(df_spheroid,df_sample,by.x="識別碼.1",by.y = "Cell",all.x = "TRUE")
#df_data <- subset.data.frame(df_spheroid, `Cell` == 25)
#[df_data$`Cell` == 25,]
SynthesisMatrix <- df_data[df_data$`Cell` == 23 | df_data$`Cell` == 25,] %>%
group_by(`CulturedDate`,`SpheroidDensity`,`Cell`,`Ingredient`,`Condition`,`Ancestor`) %>%
summarise(
count = sum(!is.na(`Diameter`)),
mean = mean(`Diameter`, na.rm = TRUE),
sd = sd(`Diameter`, na.rm = TRUE),
median = median(`Diameter`, na.rm = TRUE),
IQR = IQR(`Diameter`, na.rm = TRUE),
se = sd(`Diameter`, na.rm = TRUE)/sqrt(count)
)
SynthesisMatrix
#df_data <- subset.data.frame(df_spheroid, `Cell` == 25)
#[df_data$`Cell` == 25,]
SynthesisMatrix <- df_data[df_data$`Cell` == 23 | df_data$`Cell` == 25,] %>%
group_by(`CulturedDate`,`SpheroidDensity`,`Ingredient`,`Condition`,`Ancestor`) %>%
summarise(
count = sum(!is.na(`Diameter`)),
mean = mean(`Diameter`, na.rm = TRUE),
sd = sd(`Diameter`, na.rm = TRUE),
median = median(`Diameter`, na.rm = TRUE),
IQR = IQR(`Diameter`, na.rm = TRUE),
se = sd(`Diameter`, na.rm = TRUE)/sqrt(count)
)
SynthesisMatrix
#df_data <- subset.data.frame(df_spheroid, `Cell` == 25)
#[df_data$`Cell` == 25,]
SynthesisMatrix <- df_data[df_data$`Cell` == 23 | df_data$`Cell` == 25,] %>%
group_by(`CulturedDate`,`SpheroidDensity`,`Ingredient`,`Condition`) %>%
summarise(
count = sum(!is.na(`Diameter`)),
mean = mean(`Diameter`, na.rm = TRUE),
sd = sd(`Diameter`, na.rm = TRUE),
median = median(`Diameter`, na.rm = TRUE),
IQR = IQR(`Diameter`, na.rm = TRUE),
se = sd(`Diameter`, na.rm = TRUE)/sqrt(count)
)
SynthesisMatrix
#df_data <- subset.data.frame(df_spheroid, `Cell` == 25)
#[df_data$`Cell` == 25,]
SynthesisMatrix <- df_data[df_data$`Cell` == 23 | df_data$`Cell` == 25,] %>%
group_by(`CulturedDate`,`SpheroidDensity`,`Ingredient`,`Condition`,`Cell`,`Ancestor`) %>%
summarise(
count = sum(!is.na(`Diameter`)),
mean = mean(`Diameter`, na.rm = TRUE),
sd = sd(`Diameter`, na.rm = TRUE),
median = median(`Diameter`, na.rm = TRUE),
IQR = IQR(`Diameter`, na.rm = TRUE),
se = sd(`Diameter`, na.rm = TRUE)/sqrt(count)
)
SynthesisMatrix
df_data_reg <- subset.data.frame(df_data, `Cell` == 30 |  `Cell` == 32)
geerun <- geeglm((Diameter-452) ~ factor(CulturedDate)+factor(Cell), id=factor(Spheroid), data=df_data_reg, family=gaussian , corstr = "ind")
summary(geerun)
anova(geerun)
ggplot(df_data_reg,aes(x=CulturedDate, y=Diameter,col=factor(Cell)))+
geom_point(size=5)+
geom_line(aes(group=Spheroid),linetype="dotted", size=2)+
geom_point(
mapping = aes(x = CulturedDate, y = mean), data = SynthesisMatrix, size=3)+
geom_line(mapping = aes(x = CulturedDate, y = mean, group=Cell), data = SynthesisMatrix, size=2)+
geom_text(data = SynthesisMatrix, aes(x = CulturedDate, y = mean, label=paste(round(mean,digits = 0))),parse = TRUE, vjust=-3, size=6,fontface = "bold")+
theme_classic()+
scale_color_manual(labels=c("Compressed","Control"), values = c("coral", "lightblue"))+
labs( y="Diameter (μm)", x="Cultured Date (days)")+
theme(text = element_text(size=40),
panel.background = element_rect(fill = 'black'),
plot.background=element_rect(fill = "black",colour = "black"),
axis.title = element_text(colour = "white"),
axis.line = element_line(colour = "white",size = 1),
axis.text = element_text(color = "white"),
axis.ticks = element_line(colour ="white", size = 2),
plot.title = element_text(size=20,colour = "white"),
legend.background = element_rect(fill = 'black'),
legend.text = element_text(colour = 'white'),
legend.title = element_blank(),
legend.position = "top")+
easy_center_title()+
ylim(0,2500)
close(channel)
close(channel)
close(channel)
knitr::opts_chunk$set(echo = FALSE)
library(RODBC)
library(UsingR)
library(ggpubr)
library(ggplot2)
library(ggsignif)
library(dplyr)
library(geepack)
library(RODBC)
library(UsingR)
library(ggpubr)
library(ggplot2)
library(ggsignif)
library(dplyr)
library(geepack)
DRIVERINFO <- "Driver={Microsoft Access Driver (*.mdb, *.accdb)};"
MDBPATH <- "E:/OneDrive/文件/TMU-DESKTOP-SF2LD60-Surface-Go-Surface-Go.accdb"
PATH <- paste0(DRIVERINFO, "DBQ=", MDBPATH)
channel <- odbcDriverConnect(PATH)
df_spheroid <- sqlQuery(channel,"SELECT * FROM Spheroid, Cell WHERE Spheroid.Cell=Cell.識別碼;", stringsAsFactors = FALSE)
df_sample <- sqlQuery(channel,"SELECT * FROM Sample, Collagen_Membrane_Preparation WHERE Sample.Scaffolds=Collagen_Membrane_Preparation.識別碼;")
df_data <- merge(df_spheroid,df_sample,by.x="識別碼.1",by.y = "Cell",all.x = "TRUE")
#df_data <- subset.data.frame(df_spheroid, `Cell` == 25)
#[df_data$`Cell` == 25,]
SynthesisMatrix <- df_data %>%
group_by(`CulturedDate`,`SpheroidDensity`,`Ingredient`,`Condition`,`Cell`,`Ancestor`) %>%
summarise(
count = sum(!is.na(`Diameter`)),
mean = mean(`Diameter`, na.rm = TRUE),
sd = sd(`Diameter`, na.rm = TRUE),
median = median(`Diameter`, na.rm = TRUE),
IQR = IQR(`Diameter`, na.rm = TRUE),
se = sd(`Diameter`, na.rm = TRUE)/sqrt(count)
)
SynthesisMatrix
ggplot(df_spheroid,aes(x=CulturedDate, y=Diameter, group=SpheroidDensity))+
geom_point(aes(colour=factor(Cell)))+
geom_line(aes(group=Spheroid),linetype="dotted")+
facet_wrap(~SpheroidDensity, labeller = "label_both")+
theme_classic()+
geom_line(mapping = aes(x = CulturedDate, y = mean, group=Cell), data = SynthesisMatrix,colour='red')+
geom_text(data = SynthesisMatrix, aes(x = CulturedDate, y = mean, label=paste(round(mean,digits = 0))),
colour='red',parse = TRUE, vjust=-3, size=2)+
labs(title = "A549 Spheroid")
